{
  "language": "Solidity",
  "sources": {
    "contracts/MinimalViableDexV1.sol": {
      "content": "// SPDX-License-Identifier: SEE LICENSE IN LICENSE\npragma solidity ^0.8.8;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n//This is an exercise to put into practice a basic Dex based on Uniswap's V1 protocol,\n//as a pair that exchanges native ETH with the ERC20 token address we introduce on contract deployment.\ncontract MinimalViableDexV1 {\n    using SafeMath for uint256;\n    IERC20 token;\n    uint256 public totalLiquidity;\n    mapping(address => uint256) public liquidityProvided;\n\n    constructor() public {\n        token = IERC20(0x4786ee6a359B9916ab55e76747cf6B9D711f5dE0);\n    }\n\n    function init(uint256 tokens) public payable returns (uint256) {\n        require(totalLiquidity == 0, \"dex has already been initialized\");\n        //if someone send eth before calling the init function, the liquidity provided will be captured by\n        //the user that calls init.\n        totalLiquidity = address(this).balance;\n        liquidityProvided[msg.sender] = totalLiquidity;\n        require(token.transferFrom(msg.sender, address(this), tokens)); //transfer call for the amount we set as an input to this func\n        return totalLiquidity;\n    }\n\n    function price(uint256 a, uint256 x, uint256 y) private pure returns (uint256) {\n        //the constant k remains the same\n        //x * y = k\n        // x * y = x' * y'\n\n        //the amount of tokens we recieve depends on the multiplication of x and y to mantain the constant\n        // x' * y' = k\n        //a is the token amount we input in the exchange\n        // x + a = x'\n        //b is the token amount we recieve\n        // y - b = y'\n\n        //(x + a)(y - b) = k\n\n        //solving to b we deduce:\n        //b = (y * a) / (x + a)\n\n        //with the 0,3% trading fee:\n        //b = (y * a * 0,997) / (x + a * 0,997)\n\n        uint256 input_with_fee = a.mul(997);\n        uint256 numerator = y.mul(input_with_fee);\n        uint256 denominator = x.mul(1000).add(input_with_fee);\n        return numerator / denominator;\n    }\n\n    function ethToToken() public payable returns (uint256) {\n        uint256 tokenReserve = token.balanceOf(address(this));\n        //ETH is X, tokens are Y\n        //y - b = y'\n        //how many tokens are we getting?\n        uint256 tokensBought = price(msg.value, address(this).balance.sub(msg.value), tokenReserve); // a , x=x'- a, y\n        require(token.transfer(msg.sender, tokensBought), \"failed to transfer ETH\");\n        return tokensBought;\n    }\n\n    function tokenToEth(uint256 tokens) public payable returns (uint256) {\n        uint256 tokenReserve = token.balanceOf(address(this));\n        //in this case, tokens is X, Y is eth\n        //y - b = y'\n        //how many ETH are we getting?\n        uint256 ethBought = price(tokens, tokenReserve, address(this).balance); // a , x, y\n        require(token.transferFrom(msg.sender, address(this), tokens), \"failed to transfer tokens\");\n        (bool sent, ) = msg.sender.call{value: ethBought}(\"\");\n        require(sent, \"failed to send ETH\");\n        return ethBought;\n    }\n\n    function deposit() public payable returns (uint256) {\n        //checks the original ETH reserve, subtracting what we have sent\n        uint256 eth_reserve = address(this).balance.sub(msg.value);\n        //Token reserve\n        uint256 token_reserve = token.balanceOf(address(this));\n\n        //token amount example with a pool with reserves of 4 eth and 8000 Dai\n        // we send 1 eth, 1 * 8000 / 4 = 2000, therefore it will input the balance of 1 2000, which is correct.\n        uint256 token_amount = (msg.value.mul(token_reserve) / eth_reserve).add(1);\n\n        //((eth sent * total liquidity shares ) / eth reserves ) + 1\n        // the previous formula with 18 decimals makes it so that the LP tokens minted to the user is\n        //equal to the eth send, since the total liquidity shares in V1 is always going to be equal to the eth reserves.\n        uint256 liquidity_minted = msg.value.mul(totalLiquidity) / eth_reserve;\n        //liquidity tokens added to user balance\n        liquidityProvided[msg.sender] = liquidityProvided[msg.sender].add(liquidity_minted);\n        //update total liquidity for future liquidity operations\n        totalLiquidity = totalLiquidity.add(liquidity_minted);\n        //call transferFrom with the approved tokens to this contract to finish adding liquidity\n        require(token.transferFrom(msg.sender, address(this), token_amount));\n        return liquidity_minted;\n\n        //on V2 the process is transferFunction agnostic, there is no approval, instead, the tokens must be sent to the contract,\n        //the contract itself will keep track of the token balance after each interaction, and will calculate how many tokens you have sent,\n        //based on the difference between the balanceOf its own address in the ERC20 contract, with its own balance data structure.\n    }\n\n    function withdraw(uint256 amount) public returns (uint256, uint256) {\n        //ERC20 token call to know what is the balance of this contract\n        uint256 token_reserve = token.balanceOf(address(this));\n        //on the same pool mentioned before, with 5 eth and 10000 DAI the user inputs 1 as amount\n        //1 * 5 / 5 = 1\n        uint256 eth_amount = amount.mul(address(this).balance) / totalLiquidity;\n        //1 * 10000 / 5 = 2000\n        uint256 token_amount = amount.mul(token_reserve) / totalLiquidity;\n        //liquidity subtracted from the users liquidity balance -1 = 0\n        liquidityProvided[msg.sender] = liquidityProvided[msg.sender].sub(eth_amount);\n\n        //transfer eth to user natively\n        payable(msg.sender).transfer(eth_amount);\n        //transfer 2000 dai to user\n        require(token.transfer(msg.sender, token_amount));\n        return (eth_amount, token_amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}