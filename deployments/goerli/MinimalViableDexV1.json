{
  "address": "0x40fAFAe7A99D41B59466429A434FA3fb919093e5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "yeahTokenAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ethToToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokens",
          "type": "uint256"
        }
      ],
      "name": "init",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "liquidityProvided",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokens",
          "type": "uint256"
        }
      ],
      "name": "tokenToEth",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf25f9ac0f256551d1c0f16432b4268c099d1e29434cc1eee2af8dc6c28c9094f",
  "receipt": {
    "to": null,
    "from": "0x684585A4E1F28D83F7404F0ec785758C100a3509",
    "contractAddress": "0x40fAFAe7A99D41B59466429A434FA3fb919093e5",
    "transactionIndex": 57,
    "gasUsed": "1128185",
    "logsBloom": "0x
    "blockHash": "0x261186dc96a09d360b980341d210c45c6ffb25e34bbdcf1160fdc4882de8b7e1",
    "transactionHash": "0xf25f9ac0f256551d1c0f16432b4268c099d1e29434cc1eee2af8dc6c28c9094f",
    "logs": [],
    "blockNumber": 8168331,
    "cumulativeGasUsed": "12286421",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xFCA6288836902826f7CCfF63E62F813537A0350B"
  ],
  "numDeployments": 2,
  "solcInputHash": "2dd3fd751ff764d4b0be2cc66aaaefe2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"yeahTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"init\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityProvided\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"tokenToEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MinimalViableDexV1.sol\":\"MinimalViableDexV1\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/MinimalViableDexV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n//This is an exercise to put into practice a basic Dex based on Uniswap's V1 protocol,\\n//as a pair that exchanges native ETH with the ERC20 token address we introduce on contract deployment.\\ncontract MinimalViableDexV1 {\\n    using SafeMath for uint256;\\n    IERC20 token;\\n    uint256 public totalLiquidity;\\n    mapping(address => uint256) public liquidityProvided;\\n\\n    constructor(address yeahTokenAddress) public {\\n        token = IERC20(yeahTokenAddress);\\n    }\\n\\n    function init(uint256 tokens) public payable returns (uint256) {\\n        require(totalLiquidity == 0, \\\"dex has already been initialized\\\");\\n        //if someone send eth before calling the init function, the liquidity provided will be captured by\\n        //the user that calls init.\\n        totalLiquidity = address(this).balance;\\n        liquidityProvided[msg.sender] = totalLiquidity;\\n        require(token.transferFrom(msg.sender, address(this), tokens)); //transfer call for the amount we set as an input to this func\\n        return totalLiquidity;\\n    }\\n\\n    function price(uint256 a, uint256 x, uint256 y) private pure returns (uint256) {\\n        //the constant k remains the same\\n        //x * y = k\\n        // x * y = x' * y'\\n\\n        //the amount of tokens we recieve depends on the multiplication of x and y to mantain the constant\\n        // x' * y' = k\\n        //a is the token amount we input in the exchange\\n        // x + a = x'\\n        //b is the token amount we recieve\\n        // y - b = y'\\n\\n        //(x + a)(y - b) = k\\n\\n        //solving to b we deduce:\\n        //b = (y * a) / (x + a)\\n\\n        //with the 0,3% trading fee:\\n        //b = (y * a * 0,997) / (x + a * 0,997)\\n\\n        uint256 input_with_fee = a.mul(997);\\n        uint256 numerator = y.mul(input_with_fee);\\n        uint256 denominator = x.mul(1000).add(input_with_fee);\\n        return numerator / denominator;\\n    }\\n\\n    function ethToToken() public payable returns (uint256) {\\n        uint256 tokenReserve = token.balanceOf(address(this));\\n        //ETH is X, tokens are Y\\n        //y - b = y'\\n        //how many tokens are we getting?\\n        uint256 tokensBought = price(msg.value, address(this).balance.sub(msg.value), tokenReserve); // a , x=x'- a, y\\n        require(token.transfer(msg.sender, tokensBought), \\\"failed to transfer ETH\\\");\\n        return tokensBought;\\n    }\\n\\n    function tokenToEth(uint256 tokens) public payable returns (uint256) {\\n        uint256 tokenReserve = token.balanceOf(address(this));\\n        //in this case, tokens is X, Y is eth\\n        //y - b = y'\\n        //how many ETH are we getting?\\n        uint256 ethBought = price(tokens, tokenReserve, address(this).balance); // a , x, y\\n        require(token.transferFrom(msg.sender, address(this), tokens), \\\"failed to transfer tokens\\\");\\n        (bool sent, ) = msg.sender.call{value: ethBought}(\\\"\\\");\\n        require(sent, \\\"failed to send ETH\\\");\\n        return ethBought;\\n    }\\n\\n    function deposit() public payable returns (uint256) {\\n        //checks the original ETH reserve, subtracting what we have sent\\n        uint256 eth_reserve = address(this).balance.sub(msg.value);\\n        //Token reserve\\n        uint256 token_reserve = token.balanceOf(address(this));\\n\\n        //token amount example with a pool with reserves of 4 eth and 8000 Dai\\n        // we send 1 eth, 1 * 8000 / 4 = 2000, therefore it will input the balance of 1 2000, which is correct.\\n        uint256 token_amount = (msg.value.mul(token_reserve) / eth_reserve).add(1);\\n\\n        //((eth sent * total liquidity shares ) / eth reserves ) + 1\\n        // the previous formula with 18 decimals makes it so that the LP tokens minted to the user is\\n        //equal to the eth send, since the total liquidity shares in V1 is always going to be equal to the eth reserves.\\n        uint256 liquidity_minted = msg.value.mul(totalLiquidity) / eth_reserve;\\n        //liquidity tokens added to user balance\\n        liquidityProvided[msg.sender] = liquidityProvided[msg.sender].add(liquidity_minted);\\n        //update total liquidity for future liquidity operations\\n        totalLiquidity = totalLiquidity.add(liquidity_minted);\\n        //call transferFrom with the approved tokens to this contract to finish adding liquidity\\n        require(token.transferFrom(msg.sender, address(this), token_amount));\\n        return liquidity_minted;\\n\\n        //on V2 the process is transferFunction agnostic, there is no approval, instead, the tokens must be sent to the contract,\\n        //the contract itself will keep track of the token balance after each interaction, and will calculate how many tokens you have sent,\\n        //based on the difference between the balanceOf its own address in the ERC20 contract, with its own balance data structure.\\n    }\\n\\n    function withdraw(uint256 amount) public returns (uint256, uint256) {\\n        //ERC20 token call to know what is the balance of this contract\\n        uint256 token_reserve = token.balanceOf(address(this));\\n        //on the same pool mentioned before, with 5 eth and 10000 DAI the user inputs 1 as amount\\n        //1 * 5 / 5 = 1\\n        uint256 eth_amount = amount.mul(address(this).balance) / totalLiquidity;\\n        //1 * 10000 / 5 = 2000\\n        uint256 token_amount = amount.mul(token_reserve) / totalLiquidity;\\n        //liquidity subtracted from the users liquidity balance -1 = 0\\n        liquidityProvided[msg.sender] = liquidityProvided[msg.sender].sub(eth_amount);\\n\\n        //transfer eth to user natively\\n        payable(msg.sender).transfer(eth_amount);\\n        //transfer 2000 dai to user\\n        require(token.transfer(msg.sender, token_amount));\\n        return (eth_amount, token_amount);\\n    }\\n}\\n\",\"keccak256\":\"0xcc4a804c99f34dd4f6f01fe8c84410504ff97cb278cb3bc55328c22fbd8fecc9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200142438038062001424833981810160405281019062000037919062000095565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200010f565b6000815190506200008f81620000f5565b92915050565b600060208284031215620000a857600080fd5b6000620000b8848285016200007e565b91505092915050565b6000620000ce82620000d5565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6200010081620000c1565b81146200010c57600080fd5b50565b611305806200011f6000396000f3fe6080604052600436106100705760003560e01c806370b2a30f1161004e57806370b2a30f1461011b578063789770f41461014b578063b7b0422d14610169578063d0e30db01461019957610070565b806315770f92146100755780632e1a7d4d146100a057806365119f72146100de575b600080fd5b34801561008157600080fd5b5061008a6101b7565b604051610097919061106f565b60405180910390f35b3480156100ac57600080fd5b506100c760048036038101906100c29190610dd5565b6101bd565b6040516100d592919061108a565b60405180910390f35b3480156100ea57600080fd5b5061010560048036038101906101009190610d83565b610456565b604051610112919061106f565b60405180910390f35b61013560048036038101906101309190610dd5565b61046e565b604051610142919061106f565b60405180910390f35b6101536106d0565b604051610160919061106f565b60405180910390f35b610183600480360381019061017e9190610dd5565b610893565b604051610190919061106f565b60405180910390f35b6101a16109e8565b6040516101ae919061106f565b60405180910390f35b60015481565b60008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161021c9190610f74565b60206040518083038186803b15801561023457600080fd5b505afa158015610248573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061026c9190610dfe565b905060006001546102864787610c7990919063ffffffff16565b6102909190611125565b905060006001546102aa8488610c7990919063ffffffff16565b6102b49190611125565b905061030882600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610c8f90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015610391573d6000803e3d6000fd5b5060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016103ed929190610fc6565b602060405180830381600087803b15801561040757600080fd5b505af115801561041b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043f9190610dac565b61044857600080fd5b818194509450505050915091565b60026020528060005260406000206000915090505481565b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016104ca9190610f74565b60206040518083038186803b1580156104e257600080fd5b505afa1580156104f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051a9190610dfe565b90506000610529848347610ca5565b905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff1660e01b815260040161058893929190610f8f565b602060405180830381600087803b1580156105a257600080fd5b505af11580156105b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105da9190610dac565b610619576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061090610fef565b60405180910390fd5b60003373ffffffffffffffffffffffffffffffffffffffff168260405161063f90610f5f565b60006040518083038185875af1925050503d806000811461067c576040519150601f19603f3d011682016040523d82523d6000602084013e610681565b606091505b50509050806106c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106bc9061102f565b60405180910390fd5b819350505050919050565b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161072c9190610f74565b60206040518083038186803b15801561074457600080fd5b505afa158015610758573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077c9190610dfe565b9050600061079d346107973447610c8f90919063ffffffff16565b84610ca5565b905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016107fa929190610fc6565b602060405180830381600087803b15801561081457600080fd5b505af1158015610828573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084c9190610dac565b61088b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108829061104f565b60405180910390fd5b809250505090565b600080600154146108d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d09061100f565b60405180910390fd5b47600181905550600154600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b815260040161098393929190610f8f565b602060405180830381600087803b15801561099d57600080fd5b505af11580156109b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d59190610dac565b6109de57600080fd5b6001549050919050565b6000806109fe3447610c8f90919063ffffffff16565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610a5c9190610f74565b60206040518083038186803b158015610a7457600080fd5b505afa158015610a88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aac9190610dfe565b90506000610ae1600184610ac98534610c7990919063ffffffff16565b610ad39190611125565b610d1990919063ffffffff16565b9050600083610afb60015434610c7990919063ffffffff16565b610b059190611125565b9050610b5981600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610d1990919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610bb181600154610d1990919063ffffffff16565b60018190555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b8152600401610c1493929190610f8f565b602060405180830381600087803b158015610c2e57600080fd5b505af1158015610c42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c669190610dac565b610c6f57600080fd5b8094505050505090565b60008183610c879190611156565b905092915050565b60008183610c9d91906111b0565b905092915050565b600080610cbd6103e586610c7990919063ffffffff16565b90506000610cd48285610c7990919063ffffffff16565b90506000610cff83610cf16103e889610c7990919063ffffffff16565b610d1990919063ffffffff16565b90508082610d0d9190611125565b93505050509392505050565b60008183610d2791906110cf565b905092915050565b600081359050610d3e8161128a565b92915050565b600081519050610d53816112a1565b92915050565b600081359050610d68816112b8565b92915050565b600081519050610d7d816112b8565b92915050565b600060208284031215610d9557600080fd5b6000610da384828501610d2f565b91505092915050565b600060208284031215610dbe57600080fd5b6000610dcc84828501610d44565b91505092915050565b600060208284031215610de757600080fd5b6000610df584828501610d59565b91505092915050565b600060208284031215610e1057600080fd5b6000610e1e84828501610d6e565b91505092915050565b610e30816111e4565b82525050565b6000610e436019836110be565b91507f6661696c656420746f207472616e7366657220746f6b656e73000000000000006000830152602082019050919050565b6000610e836020836110be565b91507f6465782068617320616c7265616479206265656e20696e697469616c697a65646000830152602082019050919050565b6000610ec36012836110be565b91507f6661696c656420746f2073656e642045544800000000000000000000000000006000830152602082019050919050565b6000610f036000836110b3565b9150600082019050919050565b6000610f1d6016836110be565b91507f6661696c656420746f207472616e7366657220455448000000000000000000006000830152602082019050919050565b610f5981611222565b82525050565b6000610f6a82610ef6565b9150819050919050565b6000602082019050610f896000830184610e27565b92915050565b6000606082019050610fa46000830186610e27565b610fb16020830185610e27565b610fbe6040830184610f50565b949350505050565b6000604082019050610fdb6000830185610e27565b610fe86020830184610f50565b9392505050565b6000602082019050818103600083015261100881610e36565b9050919050565b6000602082019050818103600083015261102881610e76565b9050919050565b6000602082019050818103600083015261104881610eb6565b9050919050565b6000602082019050818103600083015261106881610f10565b9050919050565b60006020820190506110846000830184610f50565b92915050565b600060408201905061109f6000830185610f50565b6110ac6020830184610f50565b9392505050565b600081905092915050565b600082825260208201905092915050565b60006110da82611222565b91506110e583611222565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561111a5761111961122c565b5b828201905092915050565b600061113082611222565b915061113b83611222565b92508261114b5761114a61125b565b5b828204905092915050565b600061116182611222565b915061116c83611222565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156111a5576111a461122c565b5b828202905092915050565b60006111bb82611222565b91506111c683611222565b9250828210156111d9576111d861122c565b5b828203905092915050565b60006111ef82611202565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b611293816111e4565b811461129e57600080fd5b50565b6112aa816111f6565b81146112b557600080fd5b50565b6112c181611222565b81146112cc57600080fd5b5056fea26469706673582212209168c641d00bf3f56fdaaf7dc4428f3cf6325cd9ed3860b272366344881aaf6964736f6c63430008000033",
  "deployedBytecode": "0x6080604052600436106100705760003560e01c806370b2a30f1161004e57806370b2a30f1461011b578063789770f41461014b578063b7b0422d14610169578063d0e30db01461019957610070565b806315770f92146100755780632e1a7d4d146100a057806365119f72146100de575b600080fd5b34801561008157600080fd5b5061008a6101b7565b604051610097919061106f565b60405180910390f35b3480156100ac57600080fd5b506100c760048036038101906100c29190610dd5565b6101bd565b6040516100d592919061108a565b60405180910390f35b3480156100ea57600080fd5b5061010560048036038101906101009190610d83565b610456565b604051610112919061106f565b60405180910390f35b61013560048036038101906101309190610dd5565b61046e565b604051610142919061106f565b60405180910390f35b6101536106d0565b604051610160919061106f565b60405180910390f35b610183600480360381019061017e9190610dd5565b610893565b604051610190919061106f565b60405180910390f35b6101a16109e8565b6040516101ae919061106f565b60405180910390f35b60015481565b60008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161021c9190610f74565b60206040518083038186803b15801561023457600080fd5b505afa158015610248573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061026c9190610dfe565b905060006001546102864787610c7990919063ffffffff16565b6102909190611125565b905060006001546102aa8488610c7990919063ffffffff16565b6102b49190611125565b905061030882600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610c8f90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015610391573d6000803e3d6000fd5b5060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016103ed929190610fc6565b602060405180830381600087803b15801561040757600080fd5b505af115801561041b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043f9190610dac565b61044857600080fd5b818194509450505050915091565b60026020528060005260406000206000915090505481565b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016104ca9190610f74565b60206040518083038186803b1580156104e257600080fd5b505afa1580156104f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051a9190610dfe565b90506000610529848347610ca5565b905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff1660e01b815260040161058893929190610f8f565b602060405180830381600087803b1580156105a257600080fd5b505af11580156105b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105da9190610dac565b610619576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061090610fef565b60405180910390fd5b60003373ffffffffffffffffffffffffffffffffffffffff168260405161063f90610f5f565b60006040518083038185875af1925050503d806000811461067c576040519150601f19603f3d011682016040523d82523d6000602084013e610681565b606091505b50509050806106c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106bc9061102f565b60405180910390fd5b819350505050919050565b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161072c9190610f74565b60206040518083038186803b15801561074457600080fd5b505afa158015610758573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077c9190610dfe565b9050600061079d346107973447610c8f90919063ffffffff16565b84610ca5565b905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016107fa929190610fc6565b602060405180830381600087803b15801561081457600080fd5b505af1158015610828573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084c9190610dac565b61088b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108829061104f565b60405180910390fd5b809250505090565b600080600154146108d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d09061100f565b60405180910390fd5b47600181905550600154600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b815260040161098393929190610f8f565b602060405180830381600087803b15801561099d57600080fd5b505af11580156109b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d59190610dac565b6109de57600080fd5b6001549050919050565b6000806109fe3447610c8f90919063ffffffff16565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610a5c9190610f74565b60206040518083038186803b158015610a7457600080fd5b505afa158015610a88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aac9190610dfe565b90506000610ae1600184610ac98534610c7990919063ffffffff16565b610ad39190611125565b610d1990919063ffffffff16565b9050600083610afb60015434610c7990919063ffffffff16565b610b059190611125565b9050610b5981600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610d1990919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610bb181600154610d1990919063ffffffff16565b60018190555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b8152600401610c1493929190610f8f565b602060405180830381600087803b158015610c2e57600080fd5b505af1158015610c42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c669190610dac565b610c6f57600080fd5b8094505050505090565b60008183610c879190611156565b905092915050565b60008183610c9d91906111b0565b905092915050565b600080610cbd6103e586610c7990919063ffffffff16565b90506000610cd48285610c7990919063ffffffff16565b90506000610cff83610cf16103e889610c7990919063ffffffff16565b610d1990919063ffffffff16565b90508082610d0d9190611125565b93505050509392505050565b60008183610d2791906110cf565b905092915050565b600081359050610d3e8161128a565b92915050565b600081519050610d53816112a1565b92915050565b600081359050610d68816112b8565b92915050565b600081519050610d7d816112b8565b92915050565b600060208284031215610d9557600080fd5b6000610da384828501610d2f565b91505092915050565b600060208284031215610dbe57600080fd5b6000610dcc84828501610d44565b91505092915050565b600060208284031215610de757600080fd5b6000610df584828501610d59565b91505092915050565b600060208284031215610e1057600080fd5b6000610e1e84828501610d6e565b91505092915050565b610e30816111e4565b82525050565b6000610e436019836110be565b91507f6661696c656420746f207472616e7366657220746f6b656e73000000000000006000830152602082019050919050565b6000610e836020836110be565b91507f6465782068617320616c7265616479206265656e20696e697469616c697a65646000830152602082019050919050565b6000610ec36012836110be565b91507f6661696c656420746f2073656e642045544800000000000000000000000000006000830152602082019050919050565b6000610f036000836110b3565b9150600082019050919050565b6000610f1d6016836110be565b91507f6661696c656420746f207472616e7366657220455448000000000000000000006000830152602082019050919050565b610f5981611222565b82525050565b6000610f6a82610ef6565b9150819050919050565b6000602082019050610f896000830184610e27565b92915050565b6000606082019050610fa46000830186610e27565b610fb16020830185610e27565b610fbe6040830184610f50565b949350505050565b6000604082019050610fdb6000830185610e27565b610fe86020830184610f50565b9392505050565b6000602082019050818103600083015261100881610e36565b9050919050565b6000602082019050818103600083015261102881610e76565b9050919050565b6000602082019050818103600083015261104881610eb6565b9050919050565b6000602082019050818103600083015261106881610f10565b9050919050565b60006020820190506110846000830184610f50565b92915050565b600060408201905061109f6000830185610f50565b6110ac6020830184610f50565b9392505050565b600081905092915050565b600082825260208201905092915050565b60006110da82611222565b91506110e583611222565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561111a5761111961122c565b5b828201905092915050565b600061113082611222565b915061113b83611222565b92508261114b5761114a61125b565b5b828204905092915050565b600061116182611222565b915061116c83611222565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156111a5576111a461122c565b5b828202905092915050565b60006111bb82611222565b91506111c683611222565b9250828210156111d9576111d861122c565b5b828203905092915050565b60006111ef82611202565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b611293816111e4565b811461129e57600080fd5b50565b6112aa816111f6565b81146112b557600080fd5b50565b6112c181611222565b81146112cc57600080fd5b5056fea26469706673582212209168c641d00bf3f56fdaaf7dc4428f3cf6325cd9ed3860b272366344881aaf6964736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1032,
        "contract": "contracts/MinimalViableDexV1.sol:MinimalViableDexV1",
        "label": "token",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IERC20)663"
      },
      {
        "astId": 1034,
        "contract": "contracts/MinimalViableDexV1.sol:MinimalViableDexV1",
        "label": "totalLiquidity",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1038,
        "contract": "contracts/MinimalViableDexV1.sol:MinimalViableDexV1",
        "label": "liquidityProvided",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)663": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}